import 'package:flutter/material.dart';
import 'package:spotify_sdk/models/image_uri.dart';
import 'package:spotify_sdk/spotify_sdk.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class Global {
  static bool isSpotifyConnected = false;
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load(fileName: ".env");
  runApp(MyApp());
}

class PlayerStateScreen extends StatefulWidget {
  @override
  _PlayerStateScreenState createState() => _PlayerStateScreenState();
}

class _PlayerStateScreenState extends State<PlayerStateScreen> {
  late Future<http.Response> _imageResponse;
  String artistName = "";
  String trackName = "";
  int trackDuration = 0;
  String trackURI = "";
  String imageURL = "";

  @override
  void initState() {
    super.initState();
    _loadImage();
  }

  Future<void> _loadImage() async {
    final imageUrl =
        "https://i1.sndcdn.com/artworks-000634692997-4k0s5r-t500x500.jpg";
    _imageResponse = http.get(Uri.parse(imageUrl));
  }

  void updatePlayerState() async {
    try {
      final playerState = await SpotifySdk.getPlayerState();
      setState(() {
        if (playerState != null) {
          artistName = playerState.track!.artist.name!;
          trackName = playerState.track!.name;
          trackDuration = playerState.track!.duration;
          trackURI = playerState.track!.uri;
          print(trackURI);
          //getURL(trackURI).then((value) => imageURL = value);
        } else {
          artistName = "";
          trackName = "No track playing";
          trackDuration = 0;
        }
      });
    } catch (e) {
      print(e);
    }
  }

  Future<String> getURL(String trackID) async {
    try {
      var result = await http
          .get(Uri.parse("https://embed.spotify.com/oembed/?url=$trackID"));
      if (jsonDecode(result.body)["thumbnail_url"] != null) {
        return jsonDecode(result.body)["thumbnail_url"];
      } else {
        return "https://i1.sndcdn.com/artworks-000634692997-4k0s5r-t500x500.jpg";
      }
    } catch (e) {
      print(e);
      return "https://i1.sndcdn.com/artworks-000634692997-4k0s5r-t500x500.jpg";
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        ElevatedButton(
          onPressed: () {
            updatePlayerState();
          },
          child: Text("Get Player State"),
        ),
        Text("Artist name: $artistName"),
        Text("Trackname: $trackName"),
        Text("Track duration: $trackDuration"),
        FutureBuilder<http.Response>(
          future: _imageResponse,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return CircularProgressIndicator();
            } else if (snapshot.hasError) {
              return Text("Error loading image");
            } else if (snapshot.hasData) {
              return Image.memory(snapshot.data!.bodyBytes);
            } else {
              return Text("No image");
            }
          },
        ),
      ],
    );
  }
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hello World App',
      home: Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.orange,
          title: Text('Camp Idiot - Klub 1000'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Velkommen til den Ã¥rlige klub 1000'),
              SizedBox(height: 20), // Adding some spacing
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green, // background
                  foregroundColor: Colors.white, // foreground
                ),
                onPressed: () {
                  print("pressed here");
                  authenticateWithSpotify();
                },
                child: Text('Authenticate with Spotify'),
              ),
              SizedBox(height: 20), // Adding some spacing
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red, // background
                  foregroundColor: Colors.white, // foreground
                ),
                onPressed: () {
                  print("pressed here");
                  disconnectFromSpotify();
                },
                child: Text('Disconnect from Spotify'),
              ),
              SizedBox(height: 20), // Adding some spacing
              ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor:
                      Color.fromARGB(255, 255, 166, 0), // background
                  foregroundColor: Colors.white, // foreground
                ),
                onPressed: () {
                  print("pressed here");
                  startKlub1000();
                },
                child: Text('Start Klub 1000'),
              ),
              PlayerStateScreen(), // added player state
            ],
          ),
        ),
      ),
    );
  }

  Future<void> startKlub1000() async {
    try {
      await SpotifySdk.play(
          spotifyUri: "spotify:playlist:37i9dQZF1DX4dyzvuaRJ0n");
      print("Started Klub 1000");
    } catch (e) {
      print(e);
    }
  }

  Future<void> disconnectFromSpotify() async {
    try {
      await SpotifySdk.disconnect();
      print("Disconnected from Spotify");
      Global.isSpotifyConnected = false;
    } catch (e) {
      print(e);
    }
  }

  Future<void> authenticateWithSpotify() async {
    try {
      print(dotenv.env['CLIENT_ID'].toString());
      await SpotifySdk.connectToSpotifyRemote(
        clientId: dotenv.env['CLIENT_ID'].toString(),
        redirectUrl: dotenv.env['REDIRECT_URL'].toString(),
        scope:
            "app-remote-control, user-read-playback-state, user-modify-playback-state",
      );
      print("Connected to Spotify");
      Global.isSpotifyConnected = true;
    } catch (e) {
      print(e);
    }
  }
}
